# This is an autogenerated function, ported from the original legacy version.
# It /should work/ as is, but will not have all the benefits of the modern
# function API. You should see the function docs to learn how to add function
# signatures for type safety and to document this function using puppet-strings.
#
# https://puppet.com/docs/puppet/latest/custom_functions_ruby.html
#
# ---- original file header ----
require 'fileutils'

# ---- original file header ----
#
# @summary
#   Summarise what the function does here
#
Puppet::Functions.create_function(:'include_projects_from_boxen_cli') do
  # @param args
  #   The original array of arguments. Port this to individually managed params
  #   to get the full benefit of the modern function API.
  #
  # @return [Data type]
  #   Describe what the function returns here
  #
  dispatch :default_impl do
    # Call the method named 'default_impl' when this is matched
    # Port this to match individual params for better type safety
    repeated_param 'Any', :args
  end


  def default_impl(*args)
    
    Puppet::Parser::Functions.function('include')

    projects_file = "#{Facter[:boxen_repodir].value}/.projects"

    if File.exists?(projects_file) && cli_projects = File.read(projects_file).strip
      cli_projects.split(',').each do |project|
        path = "#{Facter[:boxen_repodir].value}/modules/projects/manifests/#{project}.pp"

        if File.exist?(path)
          warning "Setting up '#{project}'. This can be made permanent by having 'include projects::#{project}' in your personal manifest."
          function_include ["projects::#{project}"]
        else
          warning "Don't know anything about '#{project}'. Help out by defining it at '#{path}'."
        end
      end
    end

    FileUtils.rm_rf(projects_file)
  
  end
end
